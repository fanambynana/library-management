openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22006
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: intervals
          description: Filter return books by intervals of dates of the releaseDate
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 50   
      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBook"
      responses:
        '200':
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    # Delete many books
    delete:
      tags:
        - "Books"
      summary: Delete one or many book(s)
      operationId: deleteManyBooks
      requestBody:
        description: The list of book's ID
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: The book(s) deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"             
  /books/{bookId}:
    delete:
      tags:
        - Books
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The book deleted
        '400':
          description: Invalid book ID supplied
        '404':
          description: Book not found
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      summary: Moify the book's author
      operationId: modifyBookAuthor
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The book modified with their author
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/authors/:
    put:
      tags:
        - "Authors"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        '200':
          description: The book's author updated

  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: The returned author are ordered by updated datetime.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: |
            Filter returned author by given name.
            If not provided, then list is not filterd.
          required: false
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 50  
      responses:
        '200':
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    put:
      tags:
        - Authors
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        '200':
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
   # TODO(Vid√©o): Delete many authors
    delete:
      tags:
        - "Authors"
      summary: Delete one or many authors
      operationId: deleteManyAuthors
      requestBody:
        description: The list of author's ID
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: The author(s) deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  /author/{authorId}:
    delete:
      tags:
        - Authors
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - name: authorId
          description: Author identifier to be deleted
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        '400':
          description: Invalid author ID supplied
        '404':
          description: Author not found
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER)
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    Status:
      type: object
      properties:
        code:
          type: integer
          enum:
            - 200
            - 400
            - 403
            - 500
        message:
          type: string
    Body:
      type: object
      properties:
        returned:
          type: object
    Response:
      type: object
      allOf:
        - $ref: "#/components/schemas/Status"
        - $ref: "#/components/schemas/Body"
  parameters:
    queryPagination:
      name: queryPgParam
      in: query
      required: false
      schema:
        type: string  
    pathPagination:
      name: pathPgParam
      in: path
      required: true
      schema:
        type: string


    

    
