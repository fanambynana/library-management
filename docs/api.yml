openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD22006
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Visitors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If `releaseDateMax` is not provided, `releaseDateMin` is ignored,
            `releaseDateMin` can not be after `releaseDateMax`
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateMax
          description: |
            If `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be before `releaseDateMin`
          required: false
          schema:
            type: string
            format: date    
        - $ref: "#/components/parameters/queryPagination" 
      responses:
        '200':
          # Return the list of all books
          $ref: '#/components/responses/BookList_200'
        '500':          
          $ref: '#/components/responses/500'          
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBook"
      responses:
        '200':
          # Return the list of created or updated book
          $ref: '#/components/responses/BookList_200'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - "Books"
      summary: Delete one or many book(s)
      operationId: deleteManyBooks
      requestBody:
        description: The list of book's ID
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          # Return the list of deleted book
          $ref: '#/components/responses/BookList_200'
        '500':
          $ref: '#/components/responses/404'                     
  /books/{bookId}:
    delete:
      tags:
        - Books
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          # Return the deleted book
          $ref: '#/components/responses/BookList_200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'  
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      summary: Moify the book's author
      operationId: modifyBookAuthor
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          # Return the list of book modified with their author
          $ref: '#/components/responses/BookList_200'
        '500':
          $ref: '#/components/responses/500'                           
  /books/authors:
    put:
      tags:
        - "Authors"
      summary: Update book's author
      operationId: updateBookAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        '200':
          description: The updated book's author
        '500':
          $ref: '#/components/responses/500'  
  /books/import:
    post:
      tags:
        - "Books"
      summary: Import book(s)
      description: Import a list of books
      operationId: importBook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBook"
      responses:
        '200':
          # Return the list of imported books
          $ref: '#/components/responses/BookList_200'
        '500':
          $ref: '#/components/responses/500'
  /books/borrow:
    put:
      tags:
        - "Visitors"
      summary: Borrow book(s)
      operationId: borrowBook
      requestBody:
        description: The list of book's ID to borrow and visitor's ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowReturnBook'
      responses:
        '200':
          # Return the list of book to borrow
          $ref: '#/components/responses/BookList_200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /books/return:
    put:
      tags:
        - "Visitors"
      summary: Return book(s)
      operationId: returnBook
      requestBody:
        description: The list of book's ID to return and visitor's ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowReturnBook'
      responses:
        '200':
          # Return the list of book to return
          $ref: '#/components/responses/BookList_200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /books/borrowed:
    get:
      tags:
        - "Books"
      summary: Get all borrowed books
      description: The returned books are ordered by updated datetime.
      operationId: getBorrowedBooks
      responses:
        '200':
          # Return the list of borrowed book
          $ref: '#/components/responses/BookList_200'
        '500':
          $ref: '#/components/responses/500'
  /books/available:
    get:
      tags:
        - "Books"
      summary: Get all available books
      description: The returned books are ordered by updated datetime.
      operationId: getAvailableBooks
      responses:
        '200':
          # Return the list of available book
          $ref: '#/components/responses/BookList_200'
        '500':
          $ref: '#/components/responses/500'      

  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: The returned author are ordered by updated datetime.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: |
            Filter returned author by given name.
            If not provided, then list is not filterd.
          required: false
          schema:
            type: string
      responses:
        '200':
          # Return the list of filtered authors
          $ref: '#/components/responses/AuthorList_200'
        '500':
          $ref: '#/components/responses/500'          
    put:
      tags:
        - Authors
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        '200':
          # Return the list of created or updated authors
          $ref: '#/components/responses/AuthorList_200'
        '400':
          $ref: '#/components/responses/400' 
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - "Authors"
      summary: Delete one or many authors
      operationId: deleteManyAuthors
      requestBody:
        description: The list of author's ID
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          # Return the list of deleted author
          $ref: '#/components/responses/AuthorList_200'
        '404':          
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'         
  /authors/{authorId}:
    delete:
      tags:
        - Authors
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - name: authorId
          description: Author identifier to be deleted
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          # Return the author deleted
          $ref: '#/components/responses/AuthorList_200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /authors/page/{pageNumber}/size/{pageSize}:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: "The returned authors are paginated by page number and page size"   
      operationId: getPaginatedAuthors
      parameters:
        - $ref: "#/components/parameters/pathPageNumber"
        - $ref: "#/components/parameters/pathPageSize"
      responses:
        '200':
          # Return the list of filtered and paginated authors
          $ref: '#/components/responses/AuthorList_200'
        '500':
          $ref: '#/components/responses/500'               
  /authors/import:
    post:
      tags:
        - "Authors"
      summary: Import author(s)
      description: Import a list of authors
      operationId: importAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        '200':
          # Return the list of imported authors
          $ref: '#/components/responses/AuthorList_200'
        '500':
          $ref: '#/components/responses/500'       

  /visitors:
    get:
      tags:
        - "Visitors"
      summary: Get all visitors
      description: The returned visitors are ordered by updated datetime.
      operationId: getVisitors
      responses:
        '200':
          description: The list of visitors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visitor'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - "Visitors"
      summary: Create or update visitor(s)
      operationId: crupdateVisitors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Visitor'
      responses:
        '200':
          description: The list of visitors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visitor'
        '400':
          $ref: '#/components/responses/400'        
        '500':
          $ref: '#/components/responses/500'            

components:
  schemas:

# --- Author ---
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    ImportAuthor:
      type: array
      items:
        type: object
        properties:
          authorName: 
            $ref: "#/components/schemas/Author/properties/name"
          sex:
            $ref: "#/components/schemas/Author/properties/id"

# --- Book ---
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    ImportBook:
      type: array
      items:
        type: object
        properties:
          bookName:
            $ref: "#/components/schemas/CrupdateBook/properties/bookName"
          author: 
            $ref: "#/components/schemas/Author"
          topic:
            $ref: "#/components/schemas/CrupdateBook/properties/topic"

# --- Book Borrow ---
    BorrowReturnBook:
      type: object
      properties:
        id:
          type: string
        bookIdList:
          type: array
          items:
            type: string
        visitorId:
          type: string

# --- Visitor ---
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string

# --- Response ---
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
              enum:
                - 200
                - 400
                - 403
                - 500
              example: 200
            message:
              type: string
              example: OK
        body:
          type: object

    BookListBody:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      properties:
        body:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    AuthorListBody:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      properties:
        body:
          type: array
          items:
            $ref: '#/components/schemas/Author'
    VisitorListBody:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      properties:
        body:
          type: array
          items:
            $ref: '#/components/schemas/Visitor'       

    BadRequestBody:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: Bad request error
        body: {}          
    ForbiddenBody:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 403
          message: Forbidden
        body: {}
    NotFoundBody:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 404
          message: Not found
        body: {}
    InternalServerErrorBody:
      type:  object
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: Internal server error
        body: {}
      
  parameters:
    queryPagination:
      name: queryPgParam
      in: query
      required: false
      schema:
        type: object
        properties:
          pageNumber:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
    pathPagination:
      name: pathPgParam
      in: path
      required: true
      schema:
        type: object
        properties:
          pageNumber:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
    pathPageNumber:
      in: path
      name: pageNumber
      required: true
      schema:
        type: integer
        default: 1
    pathPageSize:
      in: path
      name: pageSize
      required: true
      schema:
        type: integer
        default: 5
  responses:
    BookList_200:
      description: The list of books
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookListBody'
    AuthorList_200:
      description: The list of authors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorListBody'
    VisitorList_200:
      description: The list of visitors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VisitorListBody'        

    '400':
      description: Bad request exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestBody'
    '403':
      description: Forbidden exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenBody'
    '404':
      description: Not found exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundBody'
    '500':
      description: Internal server error exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerErrorBody'
           



    

    
